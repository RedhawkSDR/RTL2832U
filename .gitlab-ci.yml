variables:
  rh_20_release: '2.0.8'
  rh_21_release: '2.1.3'
  librtl_version: '0.5.2'
  namespace: rh.

#Global before script, determine if this is a tag and handle rpm release field accordingly
before_script:
    - safe_version=$(echo ${short_version} | tr -d -)
    - safe_ref=$(echo ${CI_COMMIT_REF_NAME} | tr -d /| tr '[:upper:]' '[:lower:]')
    - if [ -z "$CI_COMMIT_TAG" ]; then
        redhawk_version=${latest_version}
        rpm_release="0.$CI_PIPELINE_ID.rh${safe_version}";
      else
        redhawk_version=${release_version}
        rpm_release="`rpm --query --queryformat "%{release}\n" --specfile ${namespace}$CI_PROJECT_NAME.spec | head -n 1 | awk -F"." "{print $1}"`.rh${safe_version}";
      fi
    - redhawk_repo=$yum_repo_url/redhawk-core-framework/$redhawk_version/$dist/$arch
    - librtl_repo=$yum_repo_url/redhawk-dependencies/librtlsdr/$librtl_version/$dist/$arch

.package: &package
  image: ${docker_registry}${docker_rpm_repository}docker:latest-rpm
  stage: build
  tags:
    - ca
    - docker
  script:
    - printf "FROM ${docker_registry}${rpmbuild_repository}rpmbuild:$dist-$arch-onbuild" > Dockerfile
    - docker login ${docker_registry} -u ${docker_user} -p ${docker_password}
    - docker image build --pull
                         --tag=$CI_PROJECT_PATH_SLUG-$safe_ref-$dist-$arch-rh${safe_version}
                         --build-arg "project=$CI_PROJECT_NAME"
                         --build-arg "rpm_release=$rpm_release"
                         --build-arg "spec_file=${namespace}$CI_PROJECT_NAME.spec"
                         --build-arg "arch=$arch"
                         --build-arg "other_repos=$redhawk_repo $librtl_repo" .
    - id=$(docker container create $CI_PROJECT_PATH_SLUG-$safe_ref-$dist-$arch-rh${safe_version})
    - docker container cp $id:/root/rpmbuild/RPMS/ output/
    - docker container rm -f $id || true
    - docker image rm -f $CI_PROJECT_PATH_SLUG-$safe_ref-$dist-$arch-rh${safe_version} || true
  artifacts:
    paths:
      - output/*/*.rpm
    expire_in: 2 days
  except:
    - master
    - /^.*-external$/
    - /^(\d+\.)?(\d+)?(\.\d+)$/

package:el6:rh2.0:
  variables:
    latest_version: 2.0-nightly
    release_version: $rh_20_release
    short_version: '2.0'
    dist: el6
    arch: x86_64
  <<: *package

package:el6-i386:rh2.0:
  variables:
    latest_version: 2.0-nightly
    release_version: $rh_20_release
    short_version: '2.0'
    dist: el6
    arch: i686
  <<: *package

package:el7:rh2.0:
  variables:
    latest_version: 2.0-nightly
    release_version: $rh_20_release
    short_version: '2.0'
    dist: el7
    arch: x86_64
  <<: *package

package:el6:rh2.1:
  variables:
    latest_version: 2.1-nightly
    release_version: $rh_21_release
    short_version: '2.1'
    dist: el6
    arch: x86_64
  <<: *package

package:el6-i386:rh2.1:
  variables:
    latest_version: 2.1-nightly
    release_version: $rh_21_release
    short_version: '2.1'
    dist: el6
    arch: i686
  <<: *package

package:el7:rh2.1:
  variables:
    latest_version: 2.1-nightly
    release_version: $rh_21_release
    short_version: '2.1'
    dist: el7
    arch: x86_64
  <<: *package

deploy:
  image: ${docker_registry}centos:7
  stage: deploy
  dependencies: []
  before_script:
    - echo "Deploying to $jenkins_url/job/$CI_PROJECT_NAMESPACE/job/$CI_PROJECT_NAME-$CI_COMMIT_REF_NAME"
  script:
    - if [ -n "$jenkins_url" ]; then
        curl --insecure -X POST $jenkins_url/job/$CI_PROJECT_NAMESPACE/job/$CI_PROJECT_NAME-$CI_COMMIT_REF_NAME/buildWithParameters?pipeline_id=$CI_PIPELINE_ID --user $jenkins_user:$jenkins_api_token;
      fi
  except:
    - master
    - /^.*-external$/
    - /^(\d+\.)?(\d+)?(\.\d+)$/
